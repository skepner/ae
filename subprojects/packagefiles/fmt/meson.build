project('fmt', 'cpp',
    license : 'BSD',
    default_options : ['cpp_std=c++20', 'optimization=3', 'default_library=static']
)

fmt_private_cpp_args = [ ]
fmt_interface_cpp_args = [ ]
# libtype = get_option('default_library')
# if libtype == 'shared'
#     fmt_private_cpp_args += [ '-DFMT_EXPORT' ]
#     fmt_interface_cpp_args += [ '-DFMT_SHARED' ]
# endif

if meson.get_compiler('cpp').get_id() == 'clang'
  warning_flags = ['-Wno-padded', '-Wno-c++20-compat', '-Wno-documentation-unknown-command', '-Wno-signed-enum-bitfield', '-Wno-missing-noreturn', '-Wno-missing-variable-declarations']
else
  warning_flags = []
endif

fmt_inc = include_directories('include')
fmt_lib = library('fmt',
    sources : [
        'src/format.cc',
        'src/os.cc'
    ],
    cpp_args : warning_flags + fmt_private_cpp_args,
    include_directories : fmt_inc
)

fmt_dep = declare_dependency(
    include_directories : fmt_inc,
    compile_args : fmt_interface_cpp_args,
    link_with : fmt_lib
)

fmt_header_only_dep = declare_dependency(
    include_directories : fmt_inc,
    compile_args : '-DFMT_HEADER_ONLY'
)
