#! /usr/bin/env python3
"""
Updates seqdb with sequences read from fasta and/or ncbi
set SEQDB_V4 to use another seqdb location
"""

import os, sys, re, collections, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
from ae.sequences.source import fasta, ncbi
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    num_seqs = 0
    messages = []
    unrecognized_locations = set()
    sequences_by_subtype = {}

    for filename in args.filename:
        print(f">>> {filename}")
        if filename.is_dir() and filename.joinpath("influenza_na.dat.xz").exists():
            reader = ncbi.reader(filename)
        elif filename.is_file():
            reader = fasta.reader(filename)
        else:
            raise RuntimeError(f"\"{filename}\": unrecognized or does not exist")

        for metadata, sequence in reader:
            if not (excluded := metadata.get("excluded")):
                fasta.add_metadata_to_sequence(metadata, sequence)
                sequence_messages = ae_backend.Messages()
                try:
                    if ae_backend.raw_sequence.translate(sequence, sequence_messages) and ae_backend.raw_sequence.align(sequence, sequence_messages):
                        # only aligned are stored
                        ae_backend.raw_sequence.calculate_hash(sequence)
                        sequences_by_subtype.setdefault(sequence.type_subtype, []).append(sequence)
                except Exception as err:
                    print(f"> {err}: {sequence.name}\n    {sequence.aa}")
                reader.context.messages_from_backend(sequence_messages)
                if sequence.is_translated_not_aligned() and args.report_not_aligned and re.match(r"(A\(H[13]N|B)", sequence.type_subtype):
                    print(f">> not aligned {sequence.name} ({sequence.type_subtype})\n{sequence.aa}")
            elif args.print_messages and args.report_excluded:
                print(f">> excluded: {metadata}")
            messages += reader.get_and_clear_messages()
            num_seqs += 1
        unrecognized_locations |= reader.unrecognized_locations

    # sequences must be sorted by date before adding to the database
    # master sequence (the one with the actual sequence) in the database must be the oldest one to keep the tree more stable (if new tree is made from scratch)
    for seqs in sequences_by_subtype.values():
        seqs.sort(key=lambda seq: seq.date)

    if args.report_passages:
        passages = collections.Counter(seq.passage for seqs in sequences_by_subtype.values() for seq in seqs)
        print("Passages:\n  ", "\n  ".join("{passage:60s} {cnt:6d}".format(passage=f'"{passage}":', cnt=cnt) for passage, cnt in passages.most_common()), sep="")

    sSubtypeOrder = ["B", "A(H1N1)", "A(H1)", "A(H1N0)", "A(H3N2)", "A(H3)", "A(H3N0)"]
    def subtype_order(en: (str, list)):
        try:
            return str(sSubtypeOrder.index(en[0]))
        except ValueError:
            return f"{len(sSubtypeOrder)}{en[0]}"
    print(f">>> {num_seqs} sequences read\n  ", "\n  ".join(f"{subtype:8s} {len(seqs):6d} {seqs[0].date:>10s}..{seqs[-1].date:10s}" for subtype, seqs in sorted(sequences_by_subtype.items(), key=subtype_order) if subtype in sSubtypeOrder), sep="")

    sSeqdbSubtype = {"B": "B", "A(H1N1)": "A(H1N1)", "A(H1)": "A(H1N1)", "A(H3N2)": "A(H3N2)", "A(H3)": "A(H3N2)"}
    print("Sequences added:")
    for subtype, seqdb_subtype in sSeqdbSubtype.items():
        num_added = 0
        for seq in sequences_by_subtype.get(subtype, []):
            if ae_backend.seqdb.for_subtype(seqdb_subtype).add(seq):
                num_added += 1
        print(f"{subtype:7s} -> {seqdb_subtype:7s}: {num_added:6d} (of {len(sequences_by_subtype.get(subtype, [])):6d})")
    if args.save_seqdb:
        ae_backend.seqdb.save()

    # print(f"Labs: {len(labs)}\n{pprint.pformat(labs)}")
    print(f"Messages: {len(messages)}")
    # subtype_counter = collections.Counter(msg.type_subtype() for msg in messages)
    # print("Message subtypes:\n  ", "\n  ".join(f"{ts:8s}: {cnt:5d}" for ts, cnt in subtype_counter.most_common() if ts), sep="")
    if args.print_messages and messages:
        message_types = args.print_messages.lower()
        for msg in messages:
            if msg.type_matches(message_types): # and msg.type_subtype() in [None, "A(H1N1)", "A(H1)", "A(H3N2)", "A(H3)", "B"]:
                print(f"  {msg.type_subtype() or '?':8s}  {msg.report()}")
        if unrecognized_locations and "l" in message_types or "a" in message_types:
            print(f"Unrecognized locations: {len(unrecognized_locations)}")
            for loc in unrecognized_locations:
                print(f"  {loc}")

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("filename", nargs="+", type=Path)
    parser.add_argument("-m", dest="print_messages", default=None, help="report messages by type: a - all, l - unrecognized locations, d - deletion issues, s - subtype issues, v - lineage issues, y - date issues")
    parser.add_argument("--report-not-aligned", dest="report_not_aligned", action='store_true', default=False)
    parser.add_argument("--report-excluded", dest="report_excluded", action='store_true', default=False)
    parser.add_argument("--report-passages", dest="report_passages", action='store_true', default=False)
    parser.add_argument("--no-save", "-n", dest="save_seqdb", action='store_false', default=True)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)
